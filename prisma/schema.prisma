generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StoreStatus {
  not_verified
  pending
  approved
  rejected
  suspended
  closed
  archived
}

enum UserRole {
  super_admin
  admin
  inventory_manager
  shipment_manager
  marketer
  user
}

enum UserLevel {
  bronze
  silver
  gold
  platinum
  vip
}

enum Percentage {
  PERCENT_100 @map("100")
  PERCENT_75  @map("75")
  PERCENT_50  @map("50")
  PERCENT_25  @map("25")
  PERCENT_0   @map("0")
}

enum UserStatus {
  active
  suspended
  inactive
}

enum OrderStatus {
  pending
  confirmed
  shipped
  in_transit
  delivered
  cancelled
}

enum CommissionStatus {
  pending
  paid
  reversed
  cancelled
}

enum Gender {
  male
  female
  other
}

enum BookCategory {
  education
  fiction
  non_fiction
  science
  technology
  business
  self_help
  biography
  history
  philosophy
  religion
  politics
  economics
  psychology
  health
  cooking
  travel
  sports
  arts
  literature
  poetry
  drama
  mystery
  thriller
  romance
  fantasy
  science_fiction
  horror
  western
  adventure
  humor
  comics
  graphic_novels
  children
  young_adult
  academic
  textbook
  reference
  dictionary
  encyclopedia
  magazine
  newspaper
  other
}

enum BookGenre {
  education
  fiction
  non_fiction
  mystery
  romance
  fantasy
  science_fiction
  horror
  biography
  self_help
  other
}

enum BookLanguage {
  english
  spanish
  french
  german
  chinese
  japanese
}

enum BookFormat {
  audiobook
  e_book
  hardcover
  paperback
  hardcopy
}

enum AffiliateStatus {
  not_affiliate
  awaiting_approval
  pending
  approved
  rejected
  active
  inactive
}

model Store {
  id          String      @id @default(cuid())
  name        String
  description String?
  email       String      @unique
  phone       String
  address     String
  logo        String?
  status      StoreStatus @default(pending)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Document verification
  cacId          String? @unique
  utilityBillId  String? @unique
  taxClearanceId String? @unique

  cac           Document? @relation("CACDoc", fields: [cacId], references: [id])
  utility_bill  Document? @relation("UtilityBillDoc", fields: [utilityBillId], references: [id])
  tax_clearance Document? @relation("TaxClearanceDoc", fields: [taxClearanceId], references: [id])

  // Relations
  products      Product[]
  users         User[]
  orders        Order[]
  categories    Category[]
  notifications Notification[]
}

model Document {
  id         String @id @default(cuid())
  secure_url String
  public_id  String

  storeCac          Store? @relation("CACDoc")
  storeUtilityBill  Store? @relation("UtilityBillDoc")
  storeTaxClearance Store? @relation("TaxClearanceDoc")
}

model User {
  id                    String          @id @default(cuid())
  store_id              String?
  email                 String          @unique
  password              String
  first_name            String
  last_name             String
  phone_number          String?
  display_picture       String?
  address               String?
  gender                Gender          @default(other)
  role                  UserRole        @default(user)
  status                UserStatus      @default(active)
  is_active             Boolean         @default(true)
  level                 UserLevel       @default(bronze)
  otp                   String?         @default("")
  otp_expires_at        DateTime?
  is_email_verified     Boolean?        @default(false)
  is_otp_verified       Boolean?        @default(false)
  allowedPartialPayment Float?          @default(0)
  referralPercentage    Float? // null means use global
  referralPaymentCount  Int? // null means use global
  isAffiliate           Boolean         @default(false)
  affiliateStatus       AffiliateStatus @default(not_affiliate)
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt

  // Relations
  store          Store?        @relation(fields: [store_id], references: [id])
  orders         Order[]
  cart           Cart?
  referrals_made Referral[]    @relation("Referrer")
  referredBy     Referral[]    @relation("Referred")
  commissions    Commission[]
  referralCode   ReferralCode?
  Affiliate      Affiliate?
}

model Product {
  id            String     @id @default(cuid())
  name          String
  description   String?
  sellingPrice  Float
  normalPrice   Float
  stock         Int
  displayImages Json? // [{ secure_url: string, public_id: string }]
  storeId       String?
  commission    String?
  BookFormat    BookFormat @default(hardcover)
  isActive      Boolean    @default(true)
  status        String     @default("active") // active, inactive, suspended
  rated         String?
  isbn          String?    @unique
  publisher     String? // Publisher name
  author        String? // Author name
  pages         Int? // Number of pages
  publishedDate DateTime? // Publication date
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // Add many-to-many relations:
  categories Category[] @relation("ProductCategories")
  languages  Language[] @relation("ProductLanguages")
  genres     Genre[]    @relation("ProductGenres")
  formats    Format[]   @relation("ProductFormats")

  // Relations
  store      Store?      @relation(fields: [storeId], references: [id])
  cartItems  CartItem[]
  orderItems OrderItem[]
  referrals  Referral[]

  isFeatured Boolean     @default(false)
  PromoCode  PromoCode[]
}

model Category {
  id             String    @id @default(cuid())
  name           String
  description    String?
  storeId        String
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  createdByName  String?
  createdByEmail String?
  // Relations
  store          Store     @relation(fields: [storeId], references: [id])
  products       Product[] @relation("ProductCategories")

  @@unique([name, storeId])
}

model Cart {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User       @relation(fields: [userId], references: [id])
  items CartItem[]
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cart    Cart    @relation(fields: [cartId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

model Order {
  id              String      @id @default(cuid())
  userId          String
  storeId         String
  status          OrderStatus @default(pending)
  total           Float
  total_amount    Float       @default(0) // Adding this field for compatibility
  shippingAddress String
  trackingNumber  String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  user        User         @relation(fields: [userId], references: [id])
  store       Store        @relation(fields: [storeId], references: [id])
  items       OrderItem[]
  commissions Commission[]
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Referral {
  id         String   @id @default(cuid())
  referrerId String
  referredId String
  productId  String
  code       String   @unique
  status     String   @default("pending") // pending, completed, cancelled
  isUsed     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  referrer User    @relation("Referrer", fields: [referrerId], references: [id])
  referred User    @relation("Referred", fields: [referredId], references: [id])
  product  Product @relation(fields: [productId], references: [id])
}

model Commission {
  id        String           @id @default(cuid())
  userId    String
  orderId   String
  amount    Float
  status    CommissionStatus @default(pending)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  user  User  @relation(fields: [userId], references: [id])
  order Order @relation(fields: [orderId], references: [id])
}

model Notification {
  id          String   @id @default(cuid())
  store_id    String
  title       String
  description String
  type        String // e.g., "order", "commission", "system"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  store Store @relation(fields: [store_id], references: [id])
}

model Genre {
  id             String    @id @default(cuid())
  name           String    @unique
  description    String?
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  createdByName  String?
  createdByEmail String?
  products       Product[] @relation("ProductGenres")
}

model Language {
  id             String    @id @default(cuid())
  name           String    @unique
  description    String?
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  createdByName  String?
  createdByEmail String?
  products       Product[] @relation("ProductLanguages")
}

model Format {
  id             String    @id @default(cuid())
  name           String    @unique
  description    String?
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  createdByName  String?
  createdByEmail String?
  products       Product[] @relation("ProductFormats")
}

model AgeRating {
  id             String   @id @default(cuid())
  name           String   @unique
  description    String?
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdByName  String?
  createdByEmail String?
}

model PromoCode {
  id              String   @id @default(cuid())
  code            String   @unique
  description     String?
  discountPercent Float
  isActive        Boolean  @default(true)
  createdBy       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())

  // New fields for product-specific promo codes
  productId String? // Nullable: null means general promo code
  product   Product? @relation(fields: [productId], references: [id])
}

model ReferralCode {
  id        String   @id @default(cuid())
  code      String   @unique
  url       String   @unique
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model ReferralSetting {
  id                   String   @id @default(cuid())
  referralPercentage   Float    @default(5)
  referralPaymentCount Int      @default(1) // -1 or null for unlimited
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model Affiliate {
  id              String          @id @default(cuid())
  userId          String          @unique
  userName        String
  userEmail       String
  status          AffiliateStatus @default(pending)
  requestedAt     DateTime        @default(now())
  category        String?
  reason          String?
  reviewedAt      DateTime?
  reviewedByName  String?
  reviewedByEmail String?
  notes           String?
  user            User            @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
